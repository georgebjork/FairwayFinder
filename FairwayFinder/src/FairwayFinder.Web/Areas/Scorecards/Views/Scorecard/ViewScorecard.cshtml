@using FairwayFinder.Core.Helpers
@model FairwayFinder.Core.Features.Scorecards.Models.ViewModels.ScorecardViewModel

@{
    ViewData["Title"] = $"Scorecard - {Model.roundSummary.course_name}";
}



@{
    var front_nine_max = 9;
    var back_nine_max = 18;
}


<div class="row d-flex justify-content-between">
    <div class="col-auto">
        <h1>@Model.roundSummary.course_name</h1>
    </div>

    <div class="col-auto">
        <a class="btn btn-link me-2" asp-action="Index" asp-route-username="@Model.Username">
            <i class="fa-solid fa-arrow-left"></i> Scorecards
        </a>
        <a class="btn btn-link" asp-controller="ScorecardManagement" asp-action="EditRound" asp-route-roundId="@Model.roundSummary.round_id">
            <i class="fa-solid fa-pen-to-square"></i> Edit Round
        </a>
    </div>
</div>

<div class="row">
    <div class="col-12 mb-0">
        <p class="text-secondary mb-0"> Tee Box: @Model.roundSummary.teebox_name</p>
    </div>
    <div class="col-12">
        <p class="text-secondary"> Date: @Model.roundSummary.date_played.FormatDate()</p>
    </div>
</div>


<div class="table-responsive">
    <table class="table border-start border-top border-end border-bottom">
        <thead>
        <tr>
            @await Html.PartialAsync("_ScorecardHeader", true)
        </tr>
        </thead>
        <tbody>

        @*Yardage*@
        <tr>
            <th colspan="2">@Model.roundSummary.teebox_name</th>
            @for (var i = 0; i < front_nine_max; i++)
            {
                <td class="text-center">@Model.Holes[i].yardage</td>
            }
            <td class="text-center" colspan="2">@Model.roundSummary.yardage_out</td>
            @for (var i = front_nine_max; i < back_nine_max; i++)
            {
                <td class="text-center">@Model.Holes[i].yardage</td>
            }
            <td class="text-center" colspan="2">@Model.roundSummary.yardage_in</td>
            <td class="text-center" colspan="2">@Model.roundSummary.yardage_total</td>
        </tr>

        @*Handicap*@
        <tr>
            <th colspan="2">Handicap</th>
            @for (var i = 0; i < front_nine_max; i++)
            {
                <td class="text-center">@Model.Holes[i].handicap</td>
            }
            <td class="text-center" colspan="2">&nbsp;</td>
            @for (var i = front_nine_max; i < back_nine_max; i++)
            {
                <td class="text-center">@Model.Holes[i].handicap</td>
            }
            <td class="text-center" colspan="2">&nbsp;</td>
            <td class="text-center" colspan="2">@Model.roundSummary.slope / @Model.roundSummary.rating</td>
        </tr>


        @*Par*@
        <tr>
            <th colspan="2">Par</th>
            @for (var i = 0; i < front_nine_max; i++)
            {
                <td class="text-center">@Model.Holes[i].par</td>
            }
            <td class="text-center" colspan="2">@Model.Holes.Where(x => x.hole_number <= front_nine_max).Sum(h => h.par)</td>
            @for (var i = front_nine_max; i < back_nine_max; i++)
            {
                <td class="text-center">@Model.Holes[i].par</td>
            }
            <td class="text-center" colspan="2">@Model.Holes.Where(x => x.hole_number > front_nine_max).Sum(h => h.par)</td>
            <td class="text-center" colspan="2">@Model.roundSummary.par</td>
        </tr>

        @*Score*@
        <tr>
            <th colspan="2">@Model.Name</th>
            @for (var i = 0; i < front_nine_max; i++)
            {
                <td class="text-center position-relative">
                    <span>@Model.Holes[i].hole_score</span>
                    @switch (Model.Holes[i].hole_score - Model.Holes[i].par)
                    {
                        case <= -2:
                            @await Html.PartialAsync("ScorecardStyling/_Eagle")
                            break;
                        case -1:
                            @await Html.PartialAsync("ScorecardStyling/_Birdie")
                            break;
                        case 1:
                            @await Html.PartialAsync("ScorecardStyling/_Bogey")
                            break;
                        case >= 2:
                            @await Html.PartialAsync("ScorecardStyling/_DoubleBogey")
                            break;
                    }
                </td>
            }
            <td class="text-center" colspan="2">@Model.roundSummary.score_out</td>
            @for (var i = front_nine_max; i < back_nine_max; i++)
            {
                <td class="text-center position-relative">
                    <span>@Model.Holes[i].hole_score</span>
                    @switch (Model.Holes[i].hole_score - Model.Holes[i].par)
                    {
                        case <= -2:
                            @await Html.PartialAsync("ScorecardStyling/_Eagle")
                            break;
                        case -1:
                            @await Html.PartialAsync("ScorecardStyling/_Birdie")
                            break;
                        case 1:
                            @await Html.PartialAsync("ScorecardStyling/_Bogey")
                            break;
                        case >= 2:
                            @await Html.PartialAsync("ScorecardStyling/_DoubleBogey")
                            break;
                    }
                </td>
            }
            <td class="text-center" colspan="2">@Model.roundSummary.score_in</td>
            <td class="text-center" colspan="2">@Model.roundSummary.score</td>
        </tr>
            @if (Model.roundSummary.using_hole_stats)
            {
                <tr>
                    <th colspan="2">Fairways</th>
                    @for (var i = 0; i < front_nine_max; i++)
                    {
                        <td class="text-center">
                            @await Html.PartialAsync("Shared/_FairwayStatIcon", Model.HoleStats[i])
                        </td>
                    }
                    <td class="text-center" colspan="2">@Model.HoleStats.Where(x => x.hole_number <= front_nine_max).Count(x => x.hit_fairway == true)</td>
                    @for (var i = front_nine_max; i < back_nine_max; i++)
                    {
                        <td class="text-center">
                            @await Html.PartialAsync("Shared/_FairwayStatIcon", Model.HoleStats[i])
                        </td>
                    }
                    <td class="text-center" colspan="2">@Model.HoleStats.Where(x => x.hole_number > front_nine_max).Count(x => x.hit_fairway == true)</td>
                    <td class="text-center" colspan="2">@Model.HoleStats.Count(x => x.hit_fairway == true) / @Model.Holes.Count(x => x.par > 3)</td>
                </tr>
                <tr>
                    <th colspan="2">GIR</th>
                    @for (var i = 0; i < front_nine_max; i++)
                    {
                        <td class="text-center">
                            @await Html.PartialAsync("Shared/_GreenStatIcon", Model.HoleStats[i])
                        </td>
                    }
                    <td class="text-center" colspan="2">@Model.HoleStats.Where(x => x.hole_number <= front_nine_max).Count(x => x.hit_green == true)</td>
                    @for (var i = front_nine_max; i < back_nine_max; i++)
                    {
                        <td class="text-center">
                            @await Html.PartialAsync("Shared/_GreenStatIcon", Model.HoleStats[i])
                        </td>
                    }
                    <td class="text-center" colspan="2">@Model.HoleStats.Where(x => x.hole_number > front_nine_max).Count(x => x.hit_green == true)</td>
                    <td class="text-center" colspan="2">@Model.HoleStats.Count(x => x.hit_green == true) / @Model.HoleStats.Count</td>
                </tr>
                <tr>
                    <th colspan="2">Putts</th>
                    @for (var i = 0; i < front_nine_max; i++)
                    {
                        if (Model.HoleStats[i].number_of_putts >= 3)
                        {
                            <td class="text-center text-danger">@Model.HoleStats[i].number_of_putts</td>
                        }
                        else
                        {
                            <td class="text-center">@Model.HoleStats[i].number_of_putts</td>
                        }
                    }
                    <td class="text-center" colspan="2">@Model.HoleStats.Where(x => x.hole_number <= 9).Sum(x => x.number_of_putts)</td>
                    @for (var i = front_nine_max; i < back_nine_max; i++)
                    {
                        if (Model.HoleStats[i].number_of_putts >= 3)
                        {
                            <td class="text-center text-danger">@Model.HoleStats[i].number_of_putts</td>
                        }
                        else
                        {
                            <td class="text-center">@Model.HoleStats[i].number_of_putts</td>
                        }
                    }
                    <td class="text-center" colspan="2">@Model.HoleStats.Where(x => x.hole_number > 9).Sum(x => x.number_of_putts)</td>
                    <td class="text-center" colspan="2">@Model.HoleStats.Sum(x => x.number_of_putts)</td>
                </tr>
            }
        </tbody>
    </table>
</div>




<div class="row d-flex justify-content-between">
    <div class="col-auto">
        <h1>Stats</h1>
    </div>
</div>

<div class="row">
    @*Score count *@
    <div class="col-4">
        @await Html.PartialAsync("Shared/_ScoreCountStats", Model.ScorecardRoundStats.ScoreCountStatsQueryModel)
    </div>

    <div class="col-4">
        @await Html.PartialAsync("Shared/_ScoreToPar", Model.ScorecardRoundStats)
    </div>

    <div class="col-4">
        @await Html.PartialAsync("Shared/_AverageScoreToPar", Model.ScorecardRoundStats)
    </div>
</div>

<div class="row mt-3">
    <div class="col-6">
        <div class="card">
            <div class="card-header">
                Score Distribution
            </div>
            <div class="card-body">
                <div class="ratio ratio-4x3">
                    <canvas id="scoreDistribution"></canvas>
                </div>
            </div>
        </div>
    </div>

    <div class="col-6">
        <div class="card">
            <div class="card-header">
                Score To Par
            </div>
            <div class="card-body">
                <div class="ratio ratio-4x3">
                    <canvas id="scoreChange"></canvas>
                </div>
            </div>
        </div>
    </div>
</div>

@if (Model.roundSummary.using_hole_stats)
{
    <div class="row row-cols-lg-4 g-2">
        <div class="col">
            <div class="card h-100">
                <div class="card-header">
                    Avg. Score To Par Fwy Hit
                </div>
                <div class="card-body" id="rounds-table-card">
                    <ul class="list-group list-group-flush">
                        @foreach (var par in Model.ScorecardRoundStats.AverageScoreByParQueryModel)
                        {
                            <li class="list-group-item d-flex justify-content-between">
                                <div>Par @par.par:</div>
                                <div>@Math.Round(par.average_score_fairway_hit ,2,MidpointRounding.AwayFromZero) (@par.average_score_fairway_hit_count)</div>
                            </li>
                        }
                    </ul>
                </div>
            </div>
        </div>

        <div class="col">
            <div class="card h-100">
                <div class="card-header">
                    Avg. Score To Par Fwy Miss
                </div>
                <div class="card-body" id="rounds-table-card">
                    <ul class="list-group list-group-flush">
                        @foreach (var par in Model.ScorecardRoundStats.AverageScoreByParQueryModel)
                        {
                            <li class="list-group-item d-flex justify-content-between">
                                <div>Par @par.par:</div>
                                <div>@Math.Round(par.average_score_fairway_miss ,2,MidpointRounding.AwayFromZero) (@par.average_score_fairway_miss_count)</div>
                            </li>
                        }
                    </ul>
                </div>
            </div>
        </div>

        <div class="col">
            <div class="card h-100">
                <div class="card-header">
                    Avg. Score To Par GIR Hit
                </div>
                <div class="card-body" id="rounds-table-card">
                    <ul class="list-group list-group-flush">
                        @foreach (var par in Model.ScorecardRoundStats.AverageScoreByParQueryModel)
                        {
                            <li class="list-group-item d-flex justify-content-between">
                                <div>Par @par.par:</div>
                                <div>@Math.Round(par.average_score_green_hit ,2,MidpointRounding.AwayFromZero) (@par.average_score_green_hit_count)</div>
                            </li>
                        }
                    </ul>
                </div>
            </div>
        </div>

        <div class="col">
            <div class="card h-100">
                <div class="card-header">
                    Avg. Score To Par GIR Miss
                </div>
                <div class="card-body" id="rounds-table-card">
                    <ul class="list-group list-group-flush">
                        @foreach (var par in Model.ScorecardRoundStats.AverageScoreByParQueryModel)
                        {
                            <li class="list-group-item d-flex justify-content-between">
                                <div>Par @par.par:</div>
                                <div>@Math.Round(par.average_score_green_miss ,2,MidpointRounding.AwayFromZero) (@par.average_score_green_miss_count)</div>
                            </li>
                        }
                    </ul>
                </div>
            </div>
        </div>
    </div>
    
    
    <div class="row mt-3">
        <div class="col-6">
            <div class="card">
                <div class="card-header">
                    <div class="row d-flex justify-content-between">
                        <div class="col-auto">
                            Putting
                        </div>

                        <div class="col-auto text-muted">
                            @Model.HoleStats.Count(x => x.number_of_putts != null) Holes Recorded
                        </div>
                    </div>
                </div>
                <div class="card-body">
                    <div class="ratio ratio-4x3">
                        <canvas id="puttingDistribution"></canvas>
                    </div>
                </div>
            </div>
        </div>

        <div class="col-6">
            <div class="card">
                <div class="card-header">
                    Driving Accuracy
                </div>
                <div class="card-body">
                    <div class="ratio ratio-4x3">
                        <canvas id="drivingAccuracy"></canvas>
                    </div>
                </div>
            </div>
        </div>
    </div>
}

@{

        long cumulative = 0;
        var cumulativeScores = Model.Holes
            .OrderBy(x => x.hole_number)
            .Select(x =>
            {
                cumulative += (x.hole_score - x.par);
                return cumulative;
            })
            .ToList();
}


@section Scripts
{
    <script>
        $(document).ready(function () {
            // Extract stats from your model
            const eaglesOrBetter = @Html.Raw(Json.Serialize(
                                       Model.ScorecardRoundStats.ScoreCountStatsQueryModel.eagles +
                                       Model.ScorecardRoundStats.ScoreCountStatsQueryModel.double_eagles +
                                       Model.ScorecardRoundStats.ScoreCountStatsQueryModel.hole_in_one
                                   ));
            const birdies = @Html.Raw(Json.Serialize(Model.ScorecardRoundStats.ScoreCountStatsQueryModel.birdies));
            const pars = @Html.Raw(Json.Serialize(Model.ScorecardRoundStats.ScoreCountStatsQueryModel.pars));
            const bogies = @Html.Raw(Json.Serialize(Model.ScorecardRoundStats.ScoreCountStatsQueryModel.bogies));
            const doubles = @Html.Raw(Json.Serialize(Model.ScorecardRoundStats.ScoreCountStatsQueryModel.double_bogies));
            const worse = @Html.Raw(Json.Serialize(Model.ScorecardRoundStats.ScoreCountStatsQueryModel.triple_or_worse));
            
            // Get canvas contexts
            const ctxDonutScores = document.getElementById('scoreDistribution').getContext('2d');
            const ctxLine = document.getElementById('scoreChange').getContext('2d');

            // Retrieve holes and scores from the model
            const numOfHoles = @Html.Raw(Json.Serialize(Model.Holes.Select(x => x.hole_number).OrderBy(y => y)));
            const scores = @Html.Raw(Json.Serialize(cumulativeScores));
            console.log(scores)
            // Line Chart configuration
            const lineData = {
                labels: numOfHoles,
                datasets: [{
                    label: 'Score to Par',
                    data: scores,
                    borderWidth: 2,
                }]
            };

            const lineChart = new Chart(ctxLine, {
                type: 'line',
                data: lineData,
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    scales: {
                        y: {
                            beginAtZero: true,
                            ticks: {
                                stepSize: 1,
                            },
                        },
                    },
                }
            });

            // Donut Chart configuration
            const scoringData = {
                labels: ["Eagles or Better", "Birdies", "Pars", "Bogeys", "Double Bogeys", "Worse"],
                datasets: [{
                    data: [eaglesOrBetter, birdies, pars, bogies, doubles, worse],
                    backgroundColor: [
                        "#1d3658",  // Eagles or Better
                        "#447a9c",  // Birdies
                        "#a7dadc",  // Pars
                        "#f2faef",  // Bogeys
                        "#e63746",  // Double Bogeys
                        "#5f1c21"   // Worse
                    ]
                }]
            };

            const donutChartScores = new Chart(ctxDonutScores, {
                type: 'doughnut',
                data: scoringData,
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        legend: {
                            position: 'bottom'
                        }
                    }
                }
            });

            const isUsingAdvancedStats = @Html.Raw(Json.Serialize(Model.roundSummary.using_hole_stats))

            if (isUsingAdvancedStats) 
            {
                const onePutts = @Html.Raw(Json.Serialize(Model.HoleStats.Count(x => x.number_of_putts <= 1)))
                const twoPutts = @Html.Raw(Json.Serialize(Model.HoleStats.Count(x => x.number_of_putts == 2)))
                const threePuttsOrWorse = @Html.Raw(Json.Serialize(Model.HoleStats.Count(x => x.number_of_putts >= 3)))

                const ctxDonutPutts = document.getElementById('puttingDistribution').getContext('2d');


                // Donut Chart configuration
                const puttingData = {
                    labels: ["1 Putt or Better", "2 Putt", "3 Putt or Worse"],
                    datasets: [{
                        data: [onePutts, twoPutts, threePuttsOrWorse],
                        backgroundColor: [
                            "#1d3658",  // 1 putt
                            "#447a9c",  // 2 putt
                            "#e63746",  // 3 putt
                        ]
                    }]
                };

                // Create the chart
                const donutChartPutting = new Chart(ctxDonutPutts, {
                    type: 'doughnut',
                    data: puttingData,
                    options: {
                        responsive: true,
                        maintainAspectRatio: false,
                        plugins: {
                            legend: {
                                position: 'bottom'
                            }
                        }
                    }
                });
            }

        });
    </script>
}

