@using FairwayFinder.Core.Helpers
@using FairwayFinder.Core.Identity.Settings
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Mvc.TagHelpers
@model FairwayFinder.Core.Features.Scorecards.Models.ViewModels.ScorecardViewModel
@inject IAuthorizationService AuthorizationService

@{
    ViewData["Title"] = $"Scorecard - {Model.Scorecard.Course.course_name}";
    
    var canEditScorecard = (await AuthorizationService.AuthorizeAsync(User, Model.Scorecard.Round.round_id, Policy.CanEditScorecard)).Succeeded;
}


<div class="row d-flex justify-content-between">
    <div class="col-auto">
        <h1>@Model.Scorecard.Course.course_name</h1>
    </div>

    <div class="col-auto">
        <a class="btn btn-link me-2" asp-action="Index" asp-route-username="@Model.Username">
            <i class="fa-solid fa-arrow-left"></i> Scorecards
        </a>
        
        @if (canEditScorecard)
        {
            <a class="btn btn-link" asp-controller="ScorecardManagement" asp-action="EditRound" asp-route-roundId="@Model.Scorecard.Round.round_id">
                <i class="fa-solid fa-pen-to-square"></i> Edit Round
            </a>
        }
    </div>
</div>

<div class="row d-flex justify-content-between">
    
    <div class="col-auto">
        <div class="mb-0">
            <p class="text-secondary mb-0"> Tee Box: @Model.Scorecard.Teebox.teebox_name</p>
        </div>
        <div>
            <p class="text-secondary"> Date: @Model.Scorecard.Round.date_played.FormatDate()</p>
        </div>
    </div>
    
    <div class="col-auto">
        @if (canEditScorecard)
        {
            @await Html.PartialAsync("Shared/_ExcludeFromStatsButton", Model.Scorecard.Round)
        }
    </div>
    
</div>


<div class="table-responsive">
    <table class="table border-start border-top border-end border-bottom">
        <thead>
        <tr>
            @await Html.PartialAsync("_ScorecardHeader", true)
        </tr>
        </thead>
        <tbody>
            @await Html.PartialAsync("Shared/_ScorecardBody", Model)
        </tbody>
    </table>
</div>






<div class="row">
    <!-- Scoring Breakdown Section -->
    <div class="col-lg-5 col-md-12">
        <div class="h-100">
            <h1>Scoring Breakdown</h1>
            <hr/>

            <!-- Score Count Stats -->
            <div class="row">
                <div class="col-12">
                    @await Html.PartialAsync("Shared/_ScoreCountStats", Model.ScorecardRoundStats.ScoreCountStatsQueryModel)
                </div>
            </div>

            <!-- Additional Score Stats -->
            <div class="row row-cols-2 g-2 mt-2">
                <div class="col">
                    @await Html.PartialAsync("Shared/_ScoreToPar", Model.ScorecardRoundStats)
                </div>
                <div class="col">
                    @await Html.PartialAsync("Shared/_AverageScoreToPar", Model.ScorecardRoundStats)
                </div>
                @await Html.PartialAsync("Shared/_AdvancedStatsAverageScore", Model.ScorecardRoundStats)
            </div>
        </div>
    </div>

    <!-- Charts Section -->
    <div class="col-lg-7 col-md-12">
        <div class="h-100">
            <h1>Scoring Charts</h1>
            <hr/>

            <div class="row row-cols-1 g-2">
                <!-- Score Distribution Chart -->
                <div class="col">
                    <div class="card h-100">
                        <div class="card-header">Score Distribution</div>
                        <div class="card-body">
                            <canvas id="scoreDistribution"></canvas>
                        </div>
                    </div>
                </div>

                <!-- Score To Par Chart -->
                <div class="col">
                    <div class="card h-100">
                        <div class="card-header">Score To Par</div>
                        <div class="card-body">
                            <canvas id="scoreChange" style="min-height: 300px"></canvas>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>









<div class="row row-cols-4 g-2">
    
</div>





@*@if (Model.RoundSummary.using_hole_stats)
{
    
    
    
    <div class="row mt-3">
        <div class="col-6">
            <div class="card">
                <div class="card-header">
                    <div class="row d-flex justify-content-between">
                        <div class="col-auto">
                            Putting
                        </div>

                        <div class="col-auto text-muted">
                            @Model.HoleStats.Count(x => x.number_of_putts != null) Holes Recorded
                        </div>
                    </div>
                </div>
                <div class="card-body">
                    <div class="ratio ratio-4x3">
                        <canvas id="puttingDistribution"></canvas>
                    </div>
                </div>
            </div>
        </div>

        <div class="col-6">
            <div class="card">
                <div class="card-header">
                    Driving Accuracy
                </div>
                <div class="card-body">
                    <div class="ratio ratio-4x3">
                        <canvas id="drivingAccuracy"></canvas>
                    </div>
                </div>
            </div>
        </div>
    </div>
}*@

@{

        long cumulative = 0;
        var cumulativeScores = Model.Scorecard.HoleScoresList
            .OrderBy(x => x.hole_number)
            .Select(x =>
            {
                cumulative += (x.hole_score - x.par);
                return cumulative;
            })
            .ToList();
}


@section Scripts
{
    <script>
        $(document).ready(function () {
            // Extract stats from your model
            const eaglesOrBetter = @Html.Raw(Json.Serialize(
                                       Model.ScorecardRoundStats.ScoreCountStatsQueryModel.eagles +
                                       Model.ScorecardRoundStats.ScoreCountStatsQueryModel.double_eagles +
                                       Model.ScorecardRoundStats.ScoreCountStatsQueryModel.hole_in_one
                                   ));
            const birdies = @Html.Raw(Json.Serialize(Model.ScorecardRoundStats.ScoreCountStatsQueryModel.birdies));
            const pars = @Html.Raw(Json.Serialize(Model.ScorecardRoundStats.ScoreCountStatsQueryModel.pars));
            const bogies = @Html.Raw(Json.Serialize(Model.ScorecardRoundStats.ScoreCountStatsQueryModel.bogies));
            const doubles = @Html.Raw(Json.Serialize(Model.ScorecardRoundStats.ScoreCountStatsQueryModel.double_bogies));
            const worse = @Html.Raw(Json.Serialize(Model.ScorecardRoundStats.ScoreCountStatsQueryModel.triple_or_worse));
            
            // Get canvas contexts
            const ctxDonutScores = document.getElementById('scoreDistribution').getContext('2d');
            const ctxLine = document.getElementById('scoreChange').getContext('2d');

            // Retrieve holes and scores from the model
            const numOfHoles = @Html.Raw(Json.Serialize(Model.Scorecard.HoleScoresList.Select(x => x.hole_number).OrderBy(y => y)));
            const scores = @Html.Raw(Json.Serialize(cumulativeScores));
            console.log(scores)
            // Line Chart configuration
            const lineData = {
                labels: numOfHoles,
                datasets: [{
                    label: 'Score to Par',
                    data: scores,
                    borderWidth: 2,
                }]
            };

            const lineChart = new Chart(ctxLine, {
                type: 'line',
                data: lineData,
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    scales: {
                        y: {
                            beginAtZero: true,
                            ticks: {
                                stepSize: 1,
                                precision: 0
                            },
                        },
                    },
                
                }
            });

            // Donut Chart configuration
            const scoringData = {
                labels: ["Eagles or Better", "Birdies", "Pars", "Bogeys", "Double Bogeys", "Worse"],
                datasets: [{
                    data: [eaglesOrBetter, birdies, pars, bogies, doubles, worse],
                    backgroundColor: [
                        "#1d3658",  // Eagles or Better
                        "#447a9c",  // Birdies
                        "#a7dadc",  // Pars
                        "#f2faef",  // Bogeys
                        "#e63746",  // Double Bogeys
                        "#5f1c21"   // Worse
                    ]
                }]
            };

            const donutChartScores = new Chart(ctxDonutScores, {
                type: 'doughnut',
                data: scoringData,
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        legend: {
                            position: 'bottom'
                        }
                    }
                }
            });

            const isUsingAdvancedStats = @Html.Raw(Json.Serialize(Model.Scorecard.Round.using_hole_stats))

            if (isUsingAdvancedStats) 
            {
                const onePutts = @Html.Raw(Json.Serialize(Model.Scorecard.HoleStatsList.Count(x => x.number_of_putts <= 1)))
                const twoPutts = @Html.Raw(Json.Serialize(Model.Scorecard.HoleStatsList.Count(x => x.number_of_putts == 2)))
                const threePuttsOrWorse = @Html.Raw(Json.Serialize(Model.Scorecard.HoleStatsList.Count(x => x.number_of_putts >= 3)))

                const ctxDonutPutts = document.getElementById('puttingDistribution').getContext('2d');


                // Donut Chart configuration
                const puttingData = {
                    labels: ["1 Putt or Better", "2 Putt", "3 Putt or Worse"],
                    datasets: [{
                        data: [onePutts, twoPutts, threePuttsOrWorse],
                        backgroundColor: [
                            "#1d3658",  // 1 putt
                            "#447a9c",  // 2 putt
                            "#e63746",  // 3 putt
                        ]
                    }]
                };

                // Create the chart
                const donutChartPutting = new Chart(ctxDonutPutts, {
                    type: 'doughnut',
                    data: puttingData,
                    options: {
                        responsive: true,
                        maintainAspectRatio: false,
                        plugins: {
                            legend: {
                                position: 'bottom'
                            }
                        }
                    }
                });
            }
        });
    </script>
}

