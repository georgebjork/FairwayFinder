@using FairwayFinder.Core.Helpers
@using FairwayFinder.Web.Controllers
@model FairwayFinder.Core.Features.Dashboard.Models.ViewModel.DashboardScoresChartViewModel

<canvas id="scoresChart"></canvas>

<script>
    document.body.addEventListener("@HtmxTriggers.RenderChart", function(evt) {
        
        
        let chartStatus = Chart.getChart("scoresChart");
        if (chartStatus !== undefined) {
            chartStatus.destroy();
        }
    
        // Extract stats from your model
        const scores = @Html.Raw(Json.Serialize(Model.Scores.OrderBy(x => x.date_played).Select(y => y.score)));
        const dates = @Html.Raw(Json.Serialize(Model.Scores.OrderBy(x => x.date_played).Select(y => y.date_played.FormatDate())));
        
        const ctxLine = document.getElementById('scoresChart').getContext('2d');
        
        // Line Chart configuration
        const lineData = {
            labels: ['1/1/2025','1/2/2025','1/3/2025','1/4/2025','1/5/2025'],
            datasets: [{
                label: '18 Hole Scores',
                data: [36,37,38,39,40],
                borderWidth: 2,
            }]
        };

        const lineChart = new Chart(ctxLine, {
            type: 'line',
            data: lineData,
            plugins: [ChartDataLabels],
            options: {
                responsive: true,
                maintainAspectRatio: false,
                scales: {
                    y: {
                        beginAtZero: true,
                        ticks: {
                            stepSize: 1,
                        },
                    },
                },
                plugins: {
                    decimation: {
                        enabled: true,
                        algorithm: 'min-max',
                        samples: 100
                    },
                    datalabels: {
                        color: '#fff', // White text for contrast
                        backgroundColor: 'rgba(0, 123, 255, 0.8)', // Semi-transparent blue background
                        borderRadius: 6,
                        padding: 6,
                        font: {
                            size: 12,
                            weight: 'bold',
                            family: 'Arial'
                        },
                        align: 'top', // Position the label above the point
                        anchor: 'end', // Keeps it near the data point
                        formatter: (value, context) => {
                            return value; // Ensures only the value is displayed
                        },
                        display: function(context) {
                            return context.dataset.data[context.dataIndex] !== null; // Hide null values
                        }
                    }
                }
            }
        });

    })
</script>